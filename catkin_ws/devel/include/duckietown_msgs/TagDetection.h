// Generated by gencpp from file duckietown_msgs/TagDetection.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_TAGDETECTION_H
#define DUCKIETOWN_MSGS_MESSAGE_TAGDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct TagDetection_
{
  typedef TagDetection_<ContainerAllocator> Type;

  TagDetection_()
    : good(false)
    , id(0)
    , p()
    , cxy()
    , observedPerimeter(0.0)
    , homography()
    , orientation(0.0)
    , hxy()
    , transform()  {
    }
  TagDetection_(const ContainerAllocator& _alloc)
    : good(false)
    , id(0)
    , p(_alloc)
    , cxy(_alloc)
    , observedPerimeter(0.0)
    , homography(_alloc)
    , orientation(0.0)
    , hxy(_alloc)
    , transform(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _good_type;
  _good_type good;

   typedef int32_t _id_type;
  _id_type id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _p_type;
  _p_type p;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cxy_type;
  _cxy_type cxy;

   typedef float _observedPerimeter_type;
  _observedPerimeter_type observedPerimeter;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _homography_type;
  _homography_type homography;

   typedef float _orientation_type;
  _orientation_type orientation;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _hxy_type;
  _hxy_type hxy;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;




  typedef boost::shared_ptr< ::duckietown_msgs::TagDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::TagDetection_<ContainerAllocator> const> ConstPtr;

}; // struct TagDetection_

typedef ::duckietown_msgs::TagDetection_<std::allocator<void> > TagDetection;

typedef boost::shared_ptr< ::duckietown_msgs::TagDetection > TagDetectionPtr;
typedef boost::shared_ptr< ::duckietown_msgs::TagDetection const> TagDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::TagDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::TagDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'duckietown_msgs': ['/home/david/gazebo_test/catkin_ws/src/duckietown_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::TagDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::TagDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::TagDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::TagDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::TagDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::TagDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::TagDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b7d45baa0b18dbb969cc3d0e5133e7f";
  }

  static const char* value(const ::duckietown_msgs::TagDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b7d45baa0b18dbbULL;
  static const uint64_t static_value2 = 0x969cc3d0e5133e7fULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::TagDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/TagDetection";
  }

  static const char* value(const ::duckietown_msgs::TagDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::TagDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Mirrors TagDetection.h in the apriltags pkg\n\
bool good\n\
int32 id\n\
float32[] p\n\
float32[] cxy\n\
float32 observedPerimeter\n\
float32[] homography\n\
float32 orientation\n\
float32[] hxy\n\
geometry_msgs/Transform transform\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::duckietown_msgs::TagDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::TagDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.good);
      stream.next(m.id);
      stream.next(m.p);
      stream.next(m.cxy);
      stream.next(m.observedPerimeter);
      stream.next(m.homography);
      stream.next(m.orientation);
      stream.next(m.hxy);
      stream.next(m.transform);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TagDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::TagDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::TagDetection_<ContainerAllocator>& v)
  {
    s << indent << "good: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.good);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "p[]" << std::endl;
    for (size_t i = 0; i < v.p.size(); ++i)
    {
      s << indent << "  p[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.p[i]);
    }
    s << indent << "cxy[]" << std::endl;
    for (size_t i = 0; i < v.cxy.size(); ++i)
    {
      s << indent << "  cxy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cxy[i]);
    }
    s << indent << "observedPerimeter: ";
    Printer<float>::stream(s, indent + "  ", v.observedPerimeter);
    s << indent << "homography[]" << std::endl;
    for (size_t i = 0; i < v.homography.size(); ++i)
    {
      s << indent << "  homography[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.homography[i]);
    }
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
    s << indent << "hxy[]" << std::endl;
    for (size_t i = 0; i < v.hxy.size(); ++i)
    {
      s << indent << "  hxy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.hxy[i]);
    }
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_TAGDETECTION_H
