# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/TagDetection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class TagDetection(genpy.Message):
  _md5sum = "4b7d45baa0b18dbb969cc3d0e5133e7f"
  _type = "duckietown_msgs/TagDetection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Mirrors TagDetection.h in the apriltags pkg
bool good
int32 id
float32[] p
float32[] cxy
float32 observedPerimeter
float32[] homography
float32 orientation
float32[] hxy
geometry_msgs/Transform transform

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['good','id','p','cxy','observedPerimeter','homography','orientation','hxy','transform']
  _slot_types = ['bool','int32','float32[]','float32[]','float32','float32[]','float32','float32[]','geometry_msgs/Transform']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       good,id,p,cxy,observedPerimeter,homography,orientation,hxy,transform

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TagDetection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.good is None:
        self.good = False
      if self.id is None:
        self.id = 0
      if self.p is None:
        self.p = []
      if self.cxy is None:
        self.cxy = []
      if self.observedPerimeter is None:
        self.observedPerimeter = 0.
      if self.homography is None:
        self.homography = []
      if self.orientation is None:
        self.orientation = 0.
      if self.hxy is None:
        self.hxy = []
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
    else:
      self.good = False
      self.id = 0
      self.p = []
      self.cxy = []
      self.observedPerimeter = 0.
      self.homography = []
      self.orientation = 0.
      self.hxy = []
      self.transform = geometry_msgs.msg.Transform()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.good, _x.id))
      length = len(self.p)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.p))
      length = len(self.cxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.cxy))
      buff.write(_get_struct_f().pack(self.observedPerimeter))
      length = len(self.homography)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.homography))
      buff.write(_get_struct_f().pack(self.orientation))
      length = len(self.hxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.hxy))
      _x = self
      buff.write(_get_struct_7d().pack(_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.good, _x.id,) = _get_struct_Bi().unpack(str[start:end])
      self.good = bool(self.good)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.p = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cxy = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.observedPerimeter,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.homography = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.orientation,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.hxy = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 56
      (_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.good, _x.id))
      length = len(self.p)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.p.tostring())
      length = len(self.cxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cxy.tostring())
      buff.write(_get_struct_f().pack(self.observedPerimeter))
      length = len(self.homography)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.homography.tostring())
      buff.write(_get_struct_f().pack(self.orientation))
      length = len(self.hxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.hxy.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.good, _x.id,) = _get_struct_Bi().unpack(str[start:end])
      self.good = bool(self.good)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.p = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cxy = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.observedPerimeter,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.homography = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.orientation,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.hxy = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 56
      (_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
